name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # dev 브랜치로 푸시할때마다 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4  # 저장소 코드 체크아웃

      - name: Set up JDK 21  # Java 개발 킷 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make application.yml  # application.yml 파일 생성
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Set up Gradle  # 최신 권장 방식의 Gradle 설정
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle  # Gradle 빌드 실행 (테스트 제외)
        run: ./gradlew clean build -x test

      - name: Upload build artifact  # 빌드된 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: serverTest
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: serverTest
          path: build/libs/

      - name: Create runtime .env
        run: |
          cat > .env <<'ENV'
          SPRING_PROFILES_ACTIVE=prod
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUD_AWS_REGION_STATIC=${{ secrets.CLOUD_AWS_REGION_STATIC }}
          CLOUD_AWS_S3_BUCKET=${{ secrets.CLOUD_AWS_S3_BUCKET }}
          ENV

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" .env $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            pgrep java | xargs -r kill -15
            sleep 5
          
            set -a; source /home/$EC2_USERNAME/.env; set +a
            echo '==ENV CHECK=='
            env | grep -E 'SPRING_PROFILES_ACTIVE|DB_URL|DB_USERNAME|DB_PASSWORD' || true
          
            nohup java \
              -Dspring.profiles.active=\$SPRING_PROFILES_ACTIVE \
              -Dspring.datasource.url=\"\$DB_URL\" \
              -Dspring.datasource.username=\"\$DB_USERNAME\" \
              -Dspring.datasource.password=\"\$DB_PASSWORD\" \
              -jar /home/$EC2_USERNAME/$(basename "$jar_file") > app.log 2>&1 &
          
            for i in {1..10}; do
              sleep 3
              if curl -fsS http://127.0.0.1:8080/api/actuator/health >/dev/null; then
                echo 'App is UP'; exit 0
              fi
              echo 'Waiting for app... ('$i'/10)'
            done
          
            echo 'App failed to start'
            echo '==== LAST 200 LINES OF app.log ===='
            tail -n 200 app.log || true
            exit 1
          "
          rm -f private_key.pem

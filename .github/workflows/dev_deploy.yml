name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # dev 브랜치로 푸시할때마다 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4  # 저장소 코드 체크아웃

      - name: Set up JDK 21  # Java 개발 킷 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make application.yml  # application.yml 파일 생성
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Set up Gradle  # 최신 권장 방식의 Gradle 설정
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle  # Gradle 빌드 실행 (테스트 제외)
        run: ./gradlew clean build -x test

      - name: Upload build artifact  # 빌드된 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: serverTest
          path: build/libs/*.jar

  deploy:
    needs: build  # build 작업이 성공적으로 완료된 후 실행
    runs-on: ubuntu-24.04

    steps:
      - name: Download build artifact  # 이전 단계에서 업로드한 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: serverTest
          path: build/libs/

      - name: Deploy to EC2  # EC2에 배포
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/serverTest.jar
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            pgrep java | xargs -r kill -15  # 기존에 실행 중인 Java 프로세스 종료
            sleep 10
            nohup java -jar /home/$EC2_USERNAME/serverTest.jar > app.log 2>&1 &  # 새 버전 애플리케이션 실행
          "
          rm -f private_key.pem  # 민감한 정보 삭제
